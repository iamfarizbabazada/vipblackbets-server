#!/usr/bin/env node

const app = require('../src/app');
const debug = require('debug')('your-app:server');
const http = require('http');
const setupWebSocket = require('../src/configs/socket');

// Port ayarı
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// HTTP server oluşturma
const server = http.createServer(app);

// WebSocket kurulumu
const io = setupWebSocket(server);
app.set('io', io); // Express app içinde io nesnesine erişim için

// Server dinleme
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Port normalizasyon fonksiyonu
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

// Hata yönetimi
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Server başlatma log'u
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}