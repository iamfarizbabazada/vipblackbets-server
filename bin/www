#!/usr/bin/env node

const app = require('../src/app');
const http = require('http');
const { HOST, PORT } = require('../src/configs/env');
const setupWebSocket = require('../src/websocket');

const port = normalizePort(PORT);
app.set('port', port);

const server = http.createServer(app);

// WebSocket'i baÅŸlat
setupWebSocket(server);

server.listen(port, HOST, () => {
  console.log(`Server is running on http://${HOST}:${PORT}`);
});
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}